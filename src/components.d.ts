/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface NbActionsheet {
    /**
    * 关闭显示
    */
    'close': () => Promise<boolean>;
    /**
    * 展示标题内容 （不用title避免跟原生属性冲突）
    */
    'headTitle'?: string;
    /**
    * 是否需要遮罩 0 不需要，其他数字代表透明度
    */
    'mask': number;
    /**
    * 显示
    */
    'show': () => Promise<boolean>;
  }
  interface NbAffix {
    'getStartFixedScrollTop': () => Promise<number>;
    /**
    * 直接返回是否处于固定状态
    */
    'isFixed': () => Promise<boolean>;
    /**
    * 距离偏移量后触发（正数举例上沿，负数下沿）
    */
    'offset': number;
    /**
    * 计算举例的参照dom
    */
    'relativeSelector'?: string;
    /**
    * 固定时候zindex值
    */
    'zIndex': number;
  }
  interface NbBadge {
    /**
    * 徽标底色
    */
    'bgColor': string;
    /**
    * 展示数字，0为隐藏
    */
    'count': number;
    /**
    * 不展示数字，显示点
    */
    'dot': boolean;
    /**
    * count的封顶数值超出则显示 maxCount+
    */
    'maxCount': number;
    /**
    * 位置偏移量
    */
    'offset': number;
    /**
    * 当count为0的时候也显示
    */
    'showZero': boolean;
  }
  interface NbButtonAsync {
    /**
    * 背景
    */
    'bg': string;
    /**
    * 字体色
    */
    'color': string;
    /**
    * 如果按钮有倒计时功能该属性设置起始数字
    */
    'countdown': number;
    /**
    * 倒计时显示占位符（在 slot 对应的选择器内容会被加入倒计秒数）
    */
    'countdownContainer': string;
    /**
    * 倒计时显示内容
    */
    'countdownHtml': string;
    /**
    * 如果是有多个倒计时的需要设置唯一id
    */
    'countdownId': string;
    /**
    * 倒计时完毕后恢复内容
    */
    'countdownOrigin': string;
    /**
    * 替换 ？？变为倒计时
    */
    'countdownReplace': string;
    /**
    * 是否处于disable状态
    */
    'disable': boolean;
    /**
    * 点击对应的处理已经完成
    */
    'done': () => Promise<boolean>;
    /**
    * 处理点击
    */
    'handleClick': () => Promise<boolean>;
    /**
    * 高度
    */
    'height': number;
    /**
    * 是否处于loading状态
    */
    'loading': boolean;
    /**
    * 没有外边框
    */
    'noBorder': boolean;
    /**
    * 圆角
    */
    'radius': number;
    /**
    * 宽度
    */
    'width': number;
  }
  interface NbDatetimePicker {
    /**
    * 当前选中时间 new Date(2048, 9, 24, 5, 12) or '2048-10-24 05:12'
    */
    'date'?: any;
    /**
    * 触发选择显示开关的对象，一般是 input 框，可以是选择器字符串
    */
    'for': string;
    /**
    * 日期时间格式设置 YYYY: 4 digits year with leading zero YYY: 3 digits year with leading zero YY: 2 digits year with leading zero and be converted to a year near 2000 Y: Years with any number of digits and sign MMMM: Month name MMM: Short month name MM: Month number with leading zero M: Month number DD: Day of month with leading zero D: Day of month HH: Hours with leading zero H: Hours mm: Minutes with leading zero m: Minutes ss: Seconds with leading zero s: Seconds SSS: Milliseconds with leading zero SS: Milliseconds with leading zero S: Milliseconds
    */
    'format': string;
    /**
    * 获取实例化选择器 之后可以使用API中对应的方法 show() how the picker. hide() Hide the picker. pick() Pick the current date to the target element. getDate([formatted: 是否使用格式化]) Get the current date. setDate(date: Date) Override the current date with a new date. update() Update the picker with the current the element value / text. reset() Reset the picker and the element value / text. parseDate(date) @return {Date} Parse a date string with the set date format. formatDate(date) @return {String} Format a date object to a string with the set date format. destroy() Destroy the picker and remove the instance from the target element.
    */
    'getPicker': () => Promise<any>;
    /**
    * 每个选项上是否显示提示性文字 选项可见行数
    */
    'rows': number;
    /**
    * 取消按钮文案
    */
    'textCancel': string;
    /**
    * 确定按钮文案
    */
    'textConfirm': string;
    /**
    * 标题内容
    */
    'textTitle': string;
  }
  interface NbHeaderNav {
    /**
    * 是否固定悬浮在顶部 z-index 值
    */
    'fixed': number;
    /**
    * 左右间距
    */
    'space': number;
    /**
    * 设置样式合集
    */
    'styles': any;
    /**
    * 有下划线 标题显示位置
    */
    'titlePosition': 'left' | 'center';
    /**
    * 是否显示
    */
    'visible': boolean;
  }
  interface NbLimitTextarea {
    /**
    * 获取内容
    */
    'getContent': () => Promise<any>;
    /**
    * 输入框高度
    */
    'height': number;
    /**
    * 最大长度
    */
    'limit': number;
    /**
    * placeholder 提示信息
    */
    'placeholder': string;
  }
  interface NbList {
    /**
    * List之间的间距
    */
    'topSpace'?: number;
  }
  interface NbListItem {
    /**
    * 下边框, 0则不显示
    */
    'border': number;
    /**
    * 线条颜色
    */
    'color': string;
    /**
    * 设置单元高度
    */
    'height'?: number;
    /**
    * 短线条方向
    */
    'short'?: 'left' | 'right' | 'both';
    /**
    * 设置横线左右间距
    */
    'sideSpace'?: number;
    /**
    * 是否启用横滑操作开关
    */
    'slide': boolean;
    /**
    * 可手动回复滑动状态
    */
    'slideOut': () => Promise<boolean>;
  }
  interface NbMarquee {
    /**
    * 跑动内容列表
    */
    'items'?: {
      key: number;
      text: string;
      time?: string;
      link: string;
    }[];
    /**
    * 多少间隔动一次
    */
    'speed': number;
    /**
    * 跑马灯预设样式
    */
    'styleId': 'two-row-66h';
  }
  interface NbModal {
    /**
    * 标题（不填则去掉头部区域）
    */
    'headTitle'?: string;
    /**
    * 当弹窗类型是 confirm 时取消按钮文案
    */
    'noText': string;
    /**
    * 垂直平移距离(默认垂直剧中)
    */
    'offsetY': number;
    /**
    * 当弹窗类型是 alert, confirm 时确认按钮文案
    */
    'okText': string;
    /**
    * 点击取消按钮对应的操作
    */
    'onNo': Function;
    /**
    * 点击确认按钮对应的操作
    */
    'onOk': Function;
    /**
    * 显示位置
    */
    'position': 'center';
    /**
    * 显示
    */
    'show': (type: any, opts?: {}) => Promise<any>;
    /**
    * 样式定义
    */
    'theme': string;
    /**
    * 点击确认按钮对应的操作 中间健方便后续操作
    */
    'tmpOnOk': Function;
    /**
    * 弹窗类型
    */
    'type': 'alert' | 'confirm';
    /**
    * 可见开关
    */
    'visible': boolean;
    /**
    * 内容等比放大
    */
    'zoom': number;
  }
  interface NbSearchBar {
    /**
    * 取消搜索操作
    */
    'cancelSearch': () => Promise<boolean>;
    /**
    * 取消操作文案
    */
    'cancelText': string;
    /**
    * 输入框最大长度限制
    */
    'maxLength': number;
    /**
    * 搜索框内的提示文案
    */
    'placeholder': string;
    /**
    * 清除搜索框内容
    */
    'removeValue': () => Promise<boolean>;
    /**
    * 搜索触发延迟
    */
    'searchDelay': number;
    /**
    * 提交搜索框内容
    */
    'submitForm': (ev: any) => Promise<this>;
    /**
    * 输入框内的值（可变化反射）
    */
    'value': string;
  }
  interface NbSwitch {
    /**
    * 是否默认选中
    */
    'checked': boolean;
    /**
    * 开关背景颜色
    */
    'color': string;
    /**
    * 是否不可修改
    */
    'disabled': boolean;
    /**
    * 高度
    */
    'h': number;
    /**
    * 宽度
    */
    'w': number;
  }
  interface NbTabSlide {
    /**
    * tab 高度
    */
    'height': number;
    /**
    * 当前选中的 index
    */
    'index': number;
    /**
    * 滑动块的位置，默认：底部
    */
    'position': 'bottom' | 'top';
    /**
    * 滑块是否带圆角
    */
    'slideRadius': boolean;
    /**
    * 设置滑块的宽高 width | height
    */
    'slideWH': string;
    /**
    * tab 的宽度
    */
    'width': number;
  }
  interface NbToast {
    /**
    * 消失延时时间 0 -> 不自动消失
    */
    'duration': number;
    /**
    * 最大显示宽度
    */
    'maxLength': number;
    /**
    * 垂直平移距离(默认垂直剧中)
    */
    'offsetY': number;
    /**
    * 显示位置
    */
    'position': 'center';
    /**
    * 显示
    */
    'show': (message?: string) => Promise<any>;
    /**
    * 样式定义
    */
    'theme': string;
    /**
    * 可见开关
    */
    'visible': boolean;
    /**
    * 内容等比放大
    */
    'zoom': number;
  }
  interface NbVscrollNav {
    /**
    * 定义滚动元素 id 的前置与选中的keyword 合并成完整的 id eg：'vscroll-' + 'A' -> id='vscroll-A'
    */
    'idPrefix': string;
    /**
    * 可用于导航滑动的关键字数组
    */
    'keywords': string[];
    /**
    * 滚动列表到指定id位置
    */
    'scrollToId': (id: string) => Promise<any>;
    /**
    * 包裹可滚动的容器，不填写的话默认为window级别滚动
    */
    'scroller'?: string;
  }
}

declare global {


  interface HTMLNbActionsheetElement extends Components.NbActionsheet, HTMLStencilElement {}
  var HTMLNbActionsheetElement: {
    prototype: HTMLNbActionsheetElement;
    new (): HTMLNbActionsheetElement;
  };

  interface HTMLNbAffixElement extends Components.NbAffix, HTMLStencilElement {}
  var HTMLNbAffixElement: {
    prototype: HTMLNbAffixElement;
    new (): HTMLNbAffixElement;
  };

  interface HTMLNbBadgeElement extends Components.NbBadge, HTMLStencilElement {}
  var HTMLNbBadgeElement: {
    prototype: HTMLNbBadgeElement;
    new (): HTMLNbBadgeElement;
  };

  interface HTMLNbButtonAsyncElement extends Components.NbButtonAsync, HTMLStencilElement {}
  var HTMLNbButtonAsyncElement: {
    prototype: HTMLNbButtonAsyncElement;
    new (): HTMLNbButtonAsyncElement;
  };

  interface HTMLNbDatetimePickerElement extends Components.NbDatetimePicker, HTMLStencilElement {}
  var HTMLNbDatetimePickerElement: {
    prototype: HTMLNbDatetimePickerElement;
    new (): HTMLNbDatetimePickerElement;
  };

  interface HTMLNbHeaderNavElement extends Components.NbHeaderNav, HTMLStencilElement {}
  var HTMLNbHeaderNavElement: {
    prototype: HTMLNbHeaderNavElement;
    new (): HTMLNbHeaderNavElement;
  };

  interface HTMLNbLimitTextareaElement extends Components.NbLimitTextarea, HTMLStencilElement {}
  var HTMLNbLimitTextareaElement: {
    prototype: HTMLNbLimitTextareaElement;
    new (): HTMLNbLimitTextareaElement;
  };

  interface HTMLNbListElement extends Components.NbList, HTMLStencilElement {}
  var HTMLNbListElement: {
    prototype: HTMLNbListElement;
    new (): HTMLNbListElement;
  };

  interface HTMLNbListItemElement extends Components.NbListItem, HTMLStencilElement {}
  var HTMLNbListItemElement: {
    prototype: HTMLNbListItemElement;
    new (): HTMLNbListItemElement;
  };

  interface HTMLNbMarqueeElement extends Components.NbMarquee, HTMLStencilElement {}
  var HTMLNbMarqueeElement: {
    prototype: HTMLNbMarqueeElement;
    new (): HTMLNbMarqueeElement;
  };

  interface HTMLNbModalElement extends Components.NbModal, HTMLStencilElement {}
  var HTMLNbModalElement: {
    prototype: HTMLNbModalElement;
    new (): HTMLNbModalElement;
  };

  interface HTMLNbSearchBarElement extends Components.NbSearchBar, HTMLStencilElement {}
  var HTMLNbSearchBarElement: {
    prototype: HTMLNbSearchBarElement;
    new (): HTMLNbSearchBarElement;
  };

  interface HTMLNbSwitchElement extends Components.NbSwitch, HTMLStencilElement {}
  var HTMLNbSwitchElement: {
    prototype: HTMLNbSwitchElement;
    new (): HTMLNbSwitchElement;
  };

  interface HTMLNbTabSlideElement extends Components.NbTabSlide, HTMLStencilElement {}
  var HTMLNbTabSlideElement: {
    prototype: HTMLNbTabSlideElement;
    new (): HTMLNbTabSlideElement;
  };

  interface HTMLNbToastElement extends Components.NbToast, HTMLStencilElement {}
  var HTMLNbToastElement: {
    prototype: HTMLNbToastElement;
    new (): HTMLNbToastElement;
  };

  interface HTMLNbVscrollNavElement extends Components.NbVscrollNav, HTMLStencilElement {}
  var HTMLNbVscrollNavElement: {
    prototype: HTMLNbVscrollNavElement;
    new (): HTMLNbVscrollNavElement;
  };
  interface HTMLElementTagNameMap {
    'nb-actionsheet': HTMLNbActionsheetElement;
    'nb-affix': HTMLNbAffixElement;
    'nb-badge': HTMLNbBadgeElement;
    'nb-button-async': HTMLNbButtonAsyncElement;
    'nb-datetime-picker': HTMLNbDatetimePickerElement;
    'nb-header-nav': HTMLNbHeaderNavElement;
    'nb-limit-textarea': HTMLNbLimitTextareaElement;
    'nb-list': HTMLNbListElement;
    'nb-list-item': HTMLNbListItemElement;
    'nb-marquee': HTMLNbMarqueeElement;
    'nb-modal': HTMLNbModalElement;
    'nb-search-bar': HTMLNbSearchBarElement;
    'nb-switch': HTMLNbSwitchElement;
    'nb-tab-slide': HTMLNbTabSlideElement;
    'nb-toast': HTMLNbToastElement;
    'nb-vscroll-nav': HTMLNbVscrollNavElement;
  }
}

declare namespace LocalJSX {
  interface NbActionsheet extends JSXBase.HTMLAttributes<HTMLNbActionsheetElement> {
    /**
    * 展示标题内容 （不用title避免跟原生属性冲突）
    */
    'headTitle'?: string;
    /**
    * 是否需要遮罩 0 不需要，其他数字代表透明度
    */
    'mask'?: number;
  }
  interface NbAffix extends JSXBase.HTMLAttributes<HTMLNbAffixElement> {
    /**
    * 距离偏移量后触发（正数举例上沿，负数下沿）
    */
    'offset'?: number;
    /**
    * 当固定状态发生变化对外发送事件
    */
    'onChange'?: (event: CustomEvent<any>) => void;
    /**
    * 计算举例的参照dom
    */
    'relativeSelector'?: string;
    /**
    * 固定时候zindex值
    */
    'zIndex'?: number;
  }
  interface NbBadge extends JSXBase.HTMLAttributes<HTMLNbBadgeElement> {
    /**
    * 徽标底色
    */
    'bgColor'?: string;
    /**
    * 展示数字，0为隐藏
    */
    'count'?: number;
    /**
    * 不展示数字，显示点
    */
    'dot'?: boolean;
    /**
    * count的封顶数值超出则显示 maxCount+
    */
    'maxCount'?: number;
    /**
    * 位置偏移量
    */
    'offset'?: number;
    /**
    * 当count为0的时候也显示
    */
    'showZero'?: boolean;
  }
  interface NbButtonAsync extends JSXBase.HTMLAttributes<HTMLNbButtonAsyncElement> {
    /**
    * 背景
    */
    'bg'?: string;
    /**
    * 字体色
    */
    'color'?: string;
    /**
    * 如果按钮有倒计时功能该属性设置起始数字
    */
    'countdown'?: number;
    /**
    * 倒计时显示占位符（在 slot 对应的选择器内容会被加入倒计秒数）
    */
    'countdownContainer'?: string;
    /**
    * 倒计时显示内容
    */
    'countdownHtml'?: string;
    /**
    * 如果是有多个倒计时的需要设置唯一id
    */
    'countdownId'?: string;
    /**
    * 倒计时完毕后恢复内容
    */
    'countdownOrigin'?: string;
    /**
    * 替换 ？？变为倒计时
    */
    'countdownReplace'?: string;
    /**
    * 是否处于disable状态
    */
    'disable'?: boolean;
    /**
    * 高度
    */
    'height'?: number;
    /**
    * 是否处于loading状态
    */
    'loading'?: boolean;
    /**
    * 没有外边框
    */
    'noBorder'?: boolean;
    /**
    * 在进行倒计时
    */
    'onCount'?: (event: CustomEvent<any>) => void;
    /**
    * 处理点击
    */
    'onTap'?: (event: CustomEvent<any>) => void;
    /**
    * 圆角
    */
    'radius'?: number;
    /**
    * 宽度
    */
    'width'?: number;
  }
  interface NbDatetimePicker extends JSXBase.HTMLAttributes<HTMLNbDatetimePickerElement> {
    /**
    * 当前选中时间 new Date(2048, 9, 24, 5, 12) or '2048-10-24 05:12'
    */
    'date'?: any;
    /**
    * 触发选择显示开关的对象，一般是 input 框，可以是选择器字符串
    */
    'for'?: string;
    /**
    * 日期时间格式设置 YYYY: 4 digits year with leading zero YYY: 3 digits year with leading zero YY: 2 digits year with leading zero and be converted to a year near 2000 Y: Years with any number of digits and sign MMMM: Month name MMM: Short month name MM: Month number with leading zero M: Month number DD: Day of month with leading zero D: Day of month HH: Hours with leading zero H: Hours mm: Minutes with leading zero m: Minutes ss: Seconds with leading zero s: Seconds SSS: Milliseconds with leading zero SS: Milliseconds with leading zero S: Milliseconds
    */
    'format'?: string;
    'onReady'?: (event: CustomEvent<any>) => void;
    /**
    * 每个选项上是否显示提示性文字 选项可见行数
    */
    'rows'?: number;
    /**
    * 取消按钮文案
    */
    'textCancel'?: string;
    /**
    * 确定按钮文案
    */
    'textConfirm'?: string;
    /**
    * 标题内容
    */
    'textTitle'?: string;
  }
  interface NbHeaderNav extends JSXBase.HTMLAttributes<HTMLNbHeaderNavElement> {
    /**
    * 是否固定悬浮在顶部 z-index 值
    */
    'fixed'?: number;
    /**
    * 处理点击事件
    */
    'onTap'?: (event: CustomEvent<any>) => void;
    /**
    * 左右间距
    */
    'space'?: number;
    /**
    * 设置样式合集
    */
    'styles'?: any;
    /**
    * 有下划线 标题显示位置
    */
    'titlePosition'?: 'left' | 'center';
    /**
    * 是否显示
    */
    'visible'?: boolean;
  }
  interface NbLimitTextarea extends JSXBase.HTMLAttributes<HTMLNbLimitTextareaElement> {
    /**
    * 输入框高度
    */
    'height'?: number;
    /**
    * 最大长度
    */
    'limit'?: number;
    'onInput'?: (event: CustomEvent<any>) => void;
    'onReady'?: (event: CustomEvent<any>) => void;
    /**
    * placeholder 提示信息
    */
    'placeholder'?: string;
  }
  interface NbList extends JSXBase.HTMLAttributes<HTMLNbListElement> {
    /**
    * List之间的间距
    */
    'topSpace'?: number;
  }
  interface NbListItem extends JSXBase.HTMLAttributes<HTMLNbListItemElement> {
    /**
    * 下边框, 0则不显示
    */
    'border'?: number;
    /**
    * 线条颜色
    */
    'color'?: string;
    /**
    * 设置单元高度
    */
    'height'?: number;
    /**
    * 当滑动块触发点击返回 { detail: { item: 滑动块DOM } }
    */
    'onSlideClicked'?: (event: CustomEvent<any>) => void;
    /**
    * 划出后发出信息 { detail: { status: 'in'  | 'out' }}
    */
    'onSlideStatusChanged'?: (event: CustomEvent<any>) => void;
    /**
    * 短线条方向
    */
    'short'?: 'left' | 'right' | 'both';
    /**
    * 设置横线左右间距
    */
    'sideSpace'?: number;
    /**
    * 是否启用横滑操作开关
    */
    'slide'?: boolean;
  }
  interface NbMarquee extends JSXBase.HTMLAttributes<HTMLNbMarqueeElement> {
    /**
    * 跑动内容列表
    */
    'items'?: {
      key: number;
      text: string;
      time?: string;
      link: string;
    }[];
    /**
    * 多少间隔动一次
    */
    'speed'?: number;
    /**
    * 跑马灯预设样式
    */
    'styleId'?: 'two-row-66h';
  }
  interface NbModal extends JSXBase.HTMLAttributes<HTMLNbModalElement> {
    /**
    * 标题（不填则去掉头部区域）
    */
    'headTitle'?: string;
    /**
    * 当弹窗类型是 confirm 时取消按钮文案
    */
    'noText'?: string;
    /**
    * 垂直平移距离(默认垂直剧中)
    */
    'offsetY'?: number;
    /**
    * 当弹窗类型是 alert, confirm 时确认按钮文案
    */
    'okText'?: string;
    /**
    * 点击取消按钮对应的操作
    */
    'onNo'?: Function;
    /**
    * 点击确认按钮对应的操作
    */
    'onOk'?: Function;
    /**
    * 显示位置
    */
    'position'?: 'center';
    /**
    * 样式定义
    */
    'theme'?: string;
    /**
    * 点击确认按钮对应的操作 中间健方便后续操作
    */
    'tmpOnOk'?: Function;
    /**
    * 弹窗类型
    */
    'type'?: 'alert' | 'confirm';
    /**
    * 可见开关
    */
    'visible'?: boolean;
    /**
    * 内容等比放大
    */
    'zoom'?: number;
  }
  interface NbSearchBar extends JSXBase.HTMLAttributes<HTMLNbSearchBarElement> {
    /**
    * 取消操作文案
    */
    'cancelText'?: string;
    /**
    * 输入框最大长度限制
    */
    'maxLength'?: number;
    /**
    * 当发生取消操作时
    */
    'onCancel'?: (event: CustomEvent<any>) => void;
    /**
    * 当输入框发生变动时
    */
    'onFocusChange'?: (event: CustomEvent<any>) => void;
    /**
    * 当输入框发生变动时
    */
    'onSearch'?: (event: CustomEvent<any>) => void;
    /**
    * 当发生提交操作时
    */
    'onSubmit'?: (event: CustomEvent<any>) => void;
    /**
    * 搜索框内的提示文案
    */
    'placeholder'?: string;
    /**
    * 搜索触发延迟
    */
    'searchDelay'?: number;
    /**
    * 输入框内的值（可变化反射）
    */
    'value'?: string;
  }
  interface NbSwitch extends JSXBase.HTMLAttributes<HTMLNbSwitchElement> {
    /**
    * 是否默认选中
    */
    'checked'?: boolean;
    /**
    * 开关背景颜色
    */
    'color'?: string;
    /**
    * 是否不可修改
    */
    'disabled'?: boolean;
    /**
    * 高度
    */
    'h'?: number;
    /**
    * 当状态发生改变
    */
    'onChange'?: (event: CustomEvent<any>) => void;
    /**
    * 宽度
    */
    'w'?: number;
  }
  interface NbTabSlide extends JSXBase.HTMLAttributes<HTMLNbTabSlideElement> {
    /**
    * tab 高度
    */
    'height'?: number;
    /**
    * 当前选中的 index
    */
    'index'?: number;
    /**
    * 当 tab 切换发生变化
    */
    'onChange'?: (event: CustomEvent<any>) => void;
    /**
    * 滑动块的位置，默认：底部
    */
    'position'?: 'bottom' | 'top';
    /**
    * 滑块是否带圆角
    */
    'slideRadius'?: boolean;
    /**
    * 设置滑块的宽高 width | height
    */
    'slideWH'?: string;
    /**
    * tab 的宽度
    */
    'width'?: number;
  }
  interface NbToast extends JSXBase.HTMLAttributes<HTMLNbToastElement> {
    /**
    * 消失延时时间 0 -> 不自动消失
    */
    'duration'?: number;
    /**
    * 最大显示宽度
    */
    'maxLength'?: number;
    /**
    * 垂直平移距离(默认垂直剧中)
    */
    'offsetY'?: number;
    /**
    * 显示位置
    */
    'position'?: 'center';
    /**
    * 样式定义
    */
    'theme'?: string;
    /**
    * 可见开关
    */
    'visible'?: boolean;
    /**
    * 内容等比放大
    */
    'zoom'?: number;
  }
  interface NbVscrollNav extends JSXBase.HTMLAttributes<HTMLNbVscrollNavElement> {
    /**
    * 定义滚动元素 id 的前置与选中的keyword 合并成完整的 id eg：'vscroll-' + 'A' -> id='vscroll-A'
    */
    'idPrefix'?: string;
    /**
    * 可用于导航滑动的关键字数组
    */
    'keywords'?: string[];
    /**
    * 触发滚动
    */
    'onScrollTo'?: (event: CustomEvent<any>) => void;
    /**
    * 包裹可滚动的容器，不填写的话默认为window级别滚动
    */
    'scroller'?: string;
  }

  interface IntrinsicElements {
    'nb-actionsheet': NbActionsheet;
    'nb-affix': NbAffix;
    'nb-badge': NbBadge;
    'nb-button-async': NbButtonAsync;
    'nb-datetime-picker': NbDatetimePicker;
    'nb-header-nav': NbHeaderNav;
    'nb-limit-textarea': NbLimitTextarea;
    'nb-list': NbList;
    'nb-list-item': NbListItem;
    'nb-marquee': NbMarquee;
    'nb-modal': NbModal;
    'nb-search-bar': NbSearchBar;
    'nb-switch': NbSwitch;
    'nb-tab-slide': NbTabSlide;
    'nb-toast': NbToast;
    'nb-vscroll-nav': NbVscrollNav;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


